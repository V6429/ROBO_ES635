
AbsAvoid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000014  00800060  00800060  0000065e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000065e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000002ca  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000fa7  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000024e  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000be4  00000000  00000000  00001b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000210  00000000  00000000  00002724  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000341  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004e7  00000000  00000000  00002c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000138  00000000  00000000  0000315c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 36 02 	call	0x46c	; 0x46c <main>
  74:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7c:	83 e3       	ldi	r24, 0x33	; 51
  7e:	97 e0       	ldi	r25, 0x07	; 7
  80:	fc 01       	movw	r30, r24
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  86:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  88:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
  8a:	40 e3       	ldi	r20, 0x30	; 48
  8c:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  8e:	aa 9a       	sbi	0x15, 2	; 21
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	34 e2       	ldi	r19, 0x24	; 36
  94:	f9 01       	movw	r30, r18
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcd_set_4bit+0x1a>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  9a:	aa 98       	cbi	0x15, 2	; 21
  9c:	fc 01       	movw	r30, r24
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  a2:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  a4:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
  a6:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  a8:	aa 9a       	sbi	0x15, 2	; 21
  aa:	f9 01       	movw	r30, r18
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_set_4bit+0x30>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  b0:	aa 98       	cbi	0x15, 2	; 21
  b2:	fc 01       	movw	r30, r24
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  b8:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  ba:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
  bc:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  be:	aa 9a       	sbi	0x15, 2	; 21
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_set_4bit+0x46>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  c6:	aa 98       	cbi	0x15, 2	; 21
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  cc:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  ce:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  d4:	aa 9a       	sbi	0x15, 2	; 21
  d6:	c9 01       	movw	r24, r18
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_set_4bit+0x5c>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  dc:	aa 98       	cbi	0x15, 2	; 21
}
  de:	08 95       	ret

000000e0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
  e0:	95 b3       	in	r25, 0x15	; 21
  e2:	9f 70       	andi	r25, 0x0F	; 15
  e4:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
  e6:	25 b3       	in	r18, 0x15	; 21
  e8:	98 2f       	mov	r25, r24
  ea:	90 7f       	andi	r25, 0xF0	; 240
  ec:	92 2b       	or	r25, r18
  ee:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
  f0:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
  f2:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
  f4:	aa 9a       	sbi	0x15, 2	; 21
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	34 e2       	ldi	r19, 0x24	; 36
  fa:	f9 01       	movw	r30, r18
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
 100:	aa 98       	cbi	0x15, 2	; 21
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 102:	95 b3       	in	r25, 0x15	; 21
 104:	9f 70       	andi	r25, 0x0F	; 15
 106:	95 bb       	out	0x15, r25	; 21
	lcd_port |= cmd;
 108:	95 b3       	in	r25, 0x15	; 21
 10a:	82 95       	swap	r24
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	98 2b       	or	r25, r24
 110:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
 112:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 114:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 116:	aa 9a       	sbi	0x15, 2	; 21
 118:	c9 01       	movw	r24, r18
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
 11e:	aa 98       	cbi	0x15, 2	; 21
}
 120:	08 95       	ret

00000122 <lcd_init>:
 122:	83 e3       	ldi	r24, 0x33	; 51
 124:	97 e0       	ldi	r25, 0x07	; 7
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_init+0x4>
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
 12a:	88 e2       	ldi	r24, 0x28	; 40
 12c:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
 13c:	8e e0       	ldi	r24, 0x0E	; 14
 13e:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
}
 148:	08 95       	ret

0000014a <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 14a:	95 b3       	in	r25, 0x15	; 21
 14c:	9f 70       	andi	r25, 0x0F	; 15
 14e:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
 150:	25 b3       	in	r18, 0x15	; 21
 152:	98 2f       	mov	r25, r24
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	92 2b       	or	r25, r18
 158:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
 15a:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 15c:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 15e:	aa 9a       	sbi	0x15, 2	; 21
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	34 e2       	ldi	r19, 0x24	; 36
 164:	f9 01       	movw	r30, r18
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
 16a:	aa 98       	cbi	0x15, 2	; 21

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 16c:	95 b3       	in	r25, 0x15	; 21
 16e:	9f 70       	andi	r25, 0x0F	; 15
 170:	95 bb       	out	0x15, r25	; 21
	lcd_port |= letter;
 172:	95 b3       	in	r25, 0x15	; 21
 174:	82 95       	swap	r24
 176:	80 7f       	andi	r24, 0xF0	; 240
 178:	98 2b       	or	r25, r24
 17a:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
 17c:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 17e:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 180:	aa 9a       	sbi	0x15, 2	; 21
 182:	c9 01       	movw	r24, r18
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
 188:	aa 98       	cbi	0x15, 2	; 21
}
 18a:	08 95       	ret

0000018c <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
}
 192:	08 95       	ret

00000194 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	ec 01       	movw	r28, r24
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 19c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
		str++;
 1a0:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 1a2:	88 81       	ld	r24, Y
 1a4:	88 23       	and	r24, r24
 1a6:	d1 f7       	brne	.-12     	; 0x19c <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	69 f0       	breq	.+26     	; 0x1cc <lcd_cursor+0x1e>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	18 f4       	brcc	.+6      	; 0x1bc <lcd_cursor+0xe>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	a9 f4       	brne	.+42     	; 0x1e4 <lcd_cursor+0x36>
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <lcd_cursor+0x18>
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	49 f0       	breq	.+18     	; 0x1d2 <lcd_cursor+0x24>
 1c0:	84 30       	cpi	r24, 0x04	; 4
 1c2:	81 f4       	brne	.+32     	; 0x1e4 <lcd_cursor+0x36>
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 1c6:	86 2f       	mov	r24, r22
 1c8:	81 58       	subi	r24, 0x81	; 129
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 1cc:	86 2f       	mov	r24, r22
 1ce:	81 54       	subi	r24, 0x41	; 65
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
 1d2:	86 2f       	mov	r24, r22
 1d4:	8d 56       	subi	r24, 0x6D	; 109
 1d6:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
 1da:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 1dc:	86 2f       	mov	r24, r22
 1de:	8d 52       	subi	r24, 0x2D	; 45
 1e0:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_wr_command>
 1e4:	08 95       	ret

000001e6 <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	8a 01       	movw	r16, r20
 1f0:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 1f2:	88 23       	and	r24, r24
 1f4:	11 f0       	breq	.+4      	; 0x1fa <lcd_print+0x14>
 1f6:	66 23       	and	r22, r22
 1f8:	19 f4       	brne	.+6      	; 0x200 <lcd_print+0x1a>
	{
		lcd_home();
 1fa:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_home>
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 200:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_cursor>
	}
	if(digits==5 || flag==1)
 204:	c5 30       	cpi	r28, 0x05	; 5
 206:	d1 05       	cpc	r29, r1
 208:	71 f4       	brne	.+28     	; 0x226 <lcd_print+0x40>
	{
		million=value/10000+48;
 20a:	c8 01       	movw	r24, r16
 20c:	60 e1       	ldi	r22, 0x10	; 16
 20e:	77 e2       	ldi	r23, 0x27	; 39
 210:	0e 94 df 02 	call	0x5be	; 0x5be <__udivmodhi4>
 214:	cb 01       	movw	r24, r22
 216:	c0 96       	adiw	r24, 0x30	; 48
 218:	90 93 61 00 	sts	0x0061, r25
 21c:	80 93 60 00 	sts	0x0060, r24
		lcd_wr_char(million);
 220:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
 224:	05 c0       	rjmp	.+10     	; 0x230 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
 226:	c4 30       	cpi	r28, 0x04	; 4
 228:	d1 05       	cpc	r29, r1
 22a:	11 f0       	breq	.+4      	; 0x230 <lcd_print+0x4a>
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	16 c0       	rjmp	.+44     	; 0x25c <lcd_print+0x76>
	{
		temp = value/1000;
 230:	c8 01       	movw	r24, r16
 232:	68 ee       	ldi	r22, 0xE8	; 232
 234:	73 e0       	ldi	r23, 0x03	; 3
 236:	0e 94 df 02 	call	0x5be	; 0x5be <__udivmodhi4>
 23a:	cb 01       	movw	r24, r22
 23c:	60 93 62 00 	sts	0x0062, r22
 240:	90 93 63 00 	sts	0x0063, r25
		thousand = temp%10 + 48;
 244:	6a e0       	ldi	r22, 0x0A	; 10
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	0e 94 df 02 	call	0x5be	; 0x5be <__udivmodhi4>
 24c:	c0 96       	adiw	r24, 0x30	; 48
 24e:	90 93 73 00 	sts	0x0073, r25
 252:	80 93 72 00 	sts	0x0072, r24
		lcd_wr_char(thousand);
 256:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
 25a:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
 25c:	c3 30       	cpi	r28, 0x03	; 3
 25e:	d1 05       	cpc	r29, r1
 260:	21 f0       	breq	.+8      	; 0x26a <lcd_print+0x84>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	11 f0       	breq	.+4      	; 0x26a <lcd_print+0x84>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	16 c0       	rjmp	.+44     	; 0x296 <lcd_print+0xb0>
	{
		temp = value/100;
 26a:	c8 01       	movw	r24, r16
 26c:	64 e6       	ldi	r22, 0x64	; 100
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	0e 94 df 02 	call	0x5be	; 0x5be <__udivmodhi4>
 274:	cb 01       	movw	r24, r22
 276:	60 93 62 00 	sts	0x0062, r22
 27a:	90 93 63 00 	sts	0x0063, r25
		hundred = temp%10 + 48;
 27e:	6a e0       	ldi	r22, 0x0A	; 10
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	0e 94 df 02 	call	0x5be	; 0x5be <__udivmodhi4>
 286:	c0 96       	adiw	r24, 0x30	; 48
 288:	90 93 6f 00 	sts	0x006F, r25
 28c:	80 93 6e 00 	sts	0x006E, r24
		lcd_wr_char(hundred);
 290:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
 294:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
 296:	c2 30       	cpi	r28, 0x02	; 2
 298:	d1 05       	cpc	r29, r1
 29a:	21 f0       	breq	.+8      	; 0x2a4 <lcd_print+0xbe>
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	11 f0       	breq	.+4      	; 0x2a4 <lcd_print+0xbe>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	16 c0       	rjmp	.+44     	; 0x2d0 <lcd_print+0xea>
	{
		temp = value/10;
 2a4:	c8 01       	movw	r24, r16
 2a6:	6a e0       	ldi	r22, 0x0A	; 10
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	0e 94 df 02 	call	0x5be	; 0x5be <__udivmodhi4>
 2ae:	cb 01       	movw	r24, r22
 2b0:	60 93 62 00 	sts	0x0062, r22
 2b4:	90 93 63 00 	sts	0x0063, r25
		tens = temp%10 + 48;
 2b8:	6a e0       	ldi	r22, 0x0A	; 10
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	0e 94 df 02 	call	0x5be	; 0x5be <__udivmodhi4>
 2c0:	c0 96       	adiw	r24, 0x30	; 48
 2c2:	90 93 6c 00 	sts	0x006C, r25
 2c6:	80 93 6b 00 	sts	0x006B, r24
		lcd_wr_char(tens);
 2ca:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
 2d0:	c1 30       	cpi	r28, 0x01	; 1
 2d2:	d1 05       	cpc	r29, r1
 2d4:	11 f0       	breq	.+4      	; 0x2da <lcd_print+0xf4>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	61 f4       	brne	.+24     	; 0x2f2 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
 2da:	c8 01       	movw	r24, r16
 2dc:	6a e0       	ldi	r22, 0x0A	; 10
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	0e 94 df 02 	call	0x5be	; 0x5be <__udivmodhi4>
 2e4:	c0 96       	adiw	r24, 0x30	; 48
 2e6:	90 93 71 00 	sts	0x0071, r25
 2ea:	80 93 70 00 	sts	0x0070, r24
		lcd_wr_char(unit);
 2ee:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
	}
	if(digits>5)
 2f2:	26 97       	sbiw	r28, 0x06	; 6
 2f4:	1c f0       	brlt	.+6      	; 0x2fc <lcd_print+0x116>
	{
		lcd_wr_char('E');
 2f6:	85 e4       	ldi	r24, 0x45	; 69
 2f8:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_wr_char>
	}
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	08 95       	ret

00000306 <lcd_port_config>:
unsigned char Right_ultrasonic_Sensor;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
 306:	84 b3       	in	r24, 0x14	; 20
 308:	87 6f       	ori	r24, 0xF7	; 247
 30a:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
 30c:	85 b3       	in	r24, 0x15	; 21
 30e:	80 78       	andi	r24, 0x80	; 128
 310:	85 bb       	out	0x15, r24	; 21
}
 312:	08 95       	ret

00000314 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;  //set PORTF direction as input
 314:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00; //set PORTF pins floating
 316:	1b ba       	out	0x1b, r1	; 27
}
 318:	08 95       	ret

0000031a <ultrsonic_trigger_config>:

void ultrsonic_trigger_config(void)
{
 DDRD = DDRD | 0x40;   //all the LCD pin's direction set as output
 31a:	8e 9a       	sbi	0x11, 6	; 17
 PORTD = PORTD & 0x00; // all the LCD pins are set to logic 0 except PORTC 7
 31c:	82 b3       	in	r24, 0x12	; 18
 31e:	12 ba       	out	0x12, r1	; 18
}
 320:	08 95       	ret

00000322 <port_init>:
unsigned char Right_ultrasonic_Sensor;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
 322:	84 b3       	in	r24, 0x14	; 20
 324:	87 6f       	ori	r24, 0xF7	; 247
 326:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
 328:	85 b3       	in	r24, 0x15	; 21
 32a:	80 78       	andi	r24, 0x80	; 128
 32c:	85 bb       	out	0x15, r24	; 21
}

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;  //set PORTF direction as input
 32e:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00; //set PORTF pins floating
 330:	1b ba       	out	0x1b, r1	; 27
}

void ultrsonic_trigger_config(void)
{
 DDRD = DDRD | 0x40;   //all the LCD pin's direction set as output
 332:	8e 9a       	sbi	0x11, 6	; 17
 PORTD = PORTD & 0x00; // all the LCD pins are set to logic 0 except PORTC 7
 334:	82 b3       	in	r24, 0x12	; 18
 336:	12 ba       	out	0x12, r1	; 18
void port_init()
{
 lcd_port_config();
 adc_pin_config();		
 ultrsonic_trigger_config();
}
 338:	08 95       	ret

0000033a <adc_init>:

//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
 33a:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x0;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 33c:	17 b8       	out	0x07, r1	; 7
 ACSR = 0x80;
 33e:	80 e8       	ldi	r24, 0x80	; 128
 340:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 342:	86 e8       	ldi	r24, 0x86	; 134
 344:	86 b9       	out	0x06, r24	; 6
}
 346:	08 95       	ret

00000348 <ADC_Conversion>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
 348:	87 70       	andi	r24, 0x07	; 7
 34a:	80 62       	ori	r24, 0x20	; 32
 34c:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 34e:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
 350:	34 9b       	sbis	0x06, 4	; 6
 352:	fe cf       	rjmp	.-4      	; 0x350 <ADC_Conversion+0x8>
 a=ADCH;
 354:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 356:	34 9a       	sbi	0x06, 4	; 6
 return a;
}
 358:	08 95       	ret

0000035a <print_sensor>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
 35a:	47 70       	andi	r20, 0x07	; 7
 35c:	40 62       	ori	r20, 0x20	; 32
 35e:	47 b9       	out	0x07, r20	; 7
 ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 360:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
 362:	34 9b       	sbis	0x06, 4	; 6
 364:	fe cf       	rjmp	.-4      	; 0x362 <print_sensor+0x8>
 a=ADCH;
 366:	45 b1       	in	r20, 0x05	; 5
 ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 368:	34 9a       	sbi	0x06, 4	; 6

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
 ADC_Value = ADC_Conversion(channel);
 36a:	40 93 64 00 	sts	0x0064, r20
 lcd_print(row, coloumn, ADC_Value, 3);
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	23 e0       	ldi	r18, 0x03	; 3
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_print>
}
 378:	08 95       	ret

0000037a <ultrasonic_trigger>:

// Ultrasonic sensor are connected in chaining mode. This function rise a 
// trigger pulse of >20usec to command ringing.     
void ultrasonic_trigger(void)                 
{
 PORTD = PORTD | 0x40;  // make high the Trigger input for Ultrasonic sensor
 37a:	96 9a       	sbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 37c:	8a e7       	ldi	r24, 0x7A	; 122
 37e:	8a 95       	dec	r24
 380:	f1 f7       	brne	.-4      	; 0x37e <ultrasonic_trigger+0x4>
 _delay_us(50);         // Wait for >20usec
 PORTD = PORTD & 0xBF;  // make low the Trigger input for Ultrasonic sensor
 382:	96 98       	cbi	0x12, 6	; 18
}
 384:	08 95       	ret

00000386 <init_devices_usr>:

void init_devices_usr (void)
{
 cli();           //Clears the global interrupts
 386:	f8 94       	cli
unsigned char Right_ultrasonic_Sensor;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
 388:	84 b3       	in	r24, 0x14	; 20
 38a:	87 6f       	ori	r24, 0xF7	; 247
 38c:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
 38e:	85 b3       	in	r24, 0x15	; 21
 390:	80 78       	andi	r24, 0x80	; 128
 392:	85 bb       	out	0x15, r24	; 21
}

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;  //set PORTF direction as input
 394:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00; //set PORTF pins floating
 396:	1b ba       	out	0x1b, r1	; 27
}

void ultrsonic_trigger_config(void)
{
 DDRD = DDRD | 0x40;   //all the LCD pin's direction set as output
 398:	8e 9a       	sbi	0x11, 6	; 17
 PORTD = PORTD & 0x00; // all the LCD pins are set to logic 0 except PORTC 7
 39a:	82 b3       	in	r24, 0x12	; 18
 39c:	12 ba       	out	0x12, r1	; 18
}

//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
 39e:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x0;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 3a0:	17 b8       	out	0x07, r1	; 7
 ACSR = 0x80;
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 3a6:	86 e8       	ldi	r24, 0x86	; 134
 3a8:	86 b9       	out	0x06, r24	; 6
void init_devices_usr (void)
{
 cli();           //Clears the global interrupts
 port_init();
 adc_init();
 sei();           //Enables the global interrupts
 3aa:	78 94       	sei
}
 3ac:	08 95       	ret

000003ae <motion_pin_config>:

//Motion Code

void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
 3ae:	87 b3       	in	r24, 0x17	; 23
 3b0:	8f 60       	ori	r24, 0x0F	; 15
 3b2:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
 3b4:	88 b3       	in	r24, 0x18	; 24
 3b6:	80 7f       	andi	r24, 0xF0	; 240
 3b8:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
 3ba:	81 b3       	in	r24, 0x11	; 17
 3bc:	80 63       	ori	r24, 0x30	; 48
 3be:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
 3c0:	82 b3       	in	r24, 0x12	; 18
 3c2:	80 63       	ori	r24, 0x30	; 48
 3c4:	82 bb       	out	0x12, r24	; 18
}
 3c6:	08 95       	ret

000003c8 <motion_port_init>:

//Motion Code

void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
 3c8:	87 b3       	in	r24, 0x17	; 23
 3ca:	8f 60       	ori	r24, 0x0F	; 15
 3cc:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
 3ce:	88 b3       	in	r24, 0x18	; 24
 3d0:	80 7f       	andi	r24, 0xF0	; 240
 3d2:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
 3d4:	81 b3       	in	r24, 0x11	; 17
 3d6:	80 63       	ori	r24, 0x30	; 48
 3d8:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
 3da:	82 b3       	in	r24, 0x12	; 18
 3dc:	80 63       	ori	r24, 0x30	; 48
 3de:	82 bb       	out	0x12, r24	; 18

//Function to initialize ports
void motion_port_init()
{
 motion_pin_config();
}
 3e0:	08 95       	ret

000003e2 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 3e2:	98 b3       	in	r25, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 3e4:	90 7f       	andi	r25, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 3e6:	8f 70       	andi	r24, 0x0F	; 15
 3e8:	89 2b       	or	r24, r25
 PORTB = PortBRestore; 			// setting the command to the port
 3ea:	88 bb       	out	0x18, r24	; 24
}
 3ec:	08 95       	ret

000003ee <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 3ee:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 3f0:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 3f2:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
 3f4:	88 bb       	out	0x18, r24	; 24
}

void forward (void)         //both wheels forward
{
  motion_set(0x06);
}
 3f6:	08 95       	ret

000003f8 <back>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 3f8:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 3fa:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 3fc:	89 60       	ori	r24, 0x09	; 9
 PORTB = PortBRestore; 			// setting the command to the port
 3fe:	88 bb       	out	0x18, r24	; 24
}

void back (void)            //both wheels backward
{
  motion_set(0x09);
}
 400:	08 95       	ret

00000402 <left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 402:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 404:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 406:	85 60       	ori	r24, 0x05	; 5
 PORTB = PortBRestore; 			// setting the command to the port
 408:	88 bb       	out	0x18, r24	; 24
}

void left (void)            //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
 40a:	08 95       	ret

0000040c <right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 40c:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 40e:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 410:	8a 60       	ori	r24, 0x0A	; 10
 PORTB = PortBRestore; 			// setting the command to the port
 412:	88 bb       	out	0x18, r24	; 24
}

void right (void)           //Left wheel forward, Right wheel backward
{   
  motion_set(0x0A);
}
 414:	08 95       	ret

00000416 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 416:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 418:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 41a:	84 60       	ori	r24, 0x04	; 4
 PORTB = PortBRestore; 			// setting the command to the port
 41c:	88 bb       	out	0x18, r24	; 24
}

void soft_left (void)       //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
 41e:	08 95       	ret

00000420 <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 420:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 422:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 424:	82 60       	ori	r24, 0x02	; 2
 PORTB = PortBRestore; 			// setting the command to the port
 426:	88 bb       	out	0x18, r24	; 24
}

void soft_right (void)      //Left wheel forward, Right wheel is stationary
{ 
 motion_set(0x02);
}
 428:	08 95       	ret

0000042a <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 42a:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 42c:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 42e:	81 60       	ori	r24, 0x01	; 1
 PORTB = PortBRestore; 			// setting the command to the port
 430:	88 bb       	out	0x18, r24	; 24
}

void soft_left_2 (void)     //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
 432:	08 95       	ret

00000434 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 434:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 436:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 438:	88 60       	ori	r24, 0x08	; 8
 PORTB = PortBRestore; 			// setting the command to the port
 43a:	88 bb       	out	0x18, r24	; 24
}

void soft_right_2 (void)    //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
 43c:	08 95       	ret

0000043e <hard_stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 43e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 440:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
 442:	88 bb       	out	0x18, r24	; 24
}

void hard_stop (void)       //hard stop(stop suddenly)
{
  motion_set(0x00);
}
 444:	08 95       	ret

00000446 <soft_stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 446:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 448:	8f 60       	ori	r24, 0x0F	; 15
 PORTB = PortBRestore; 			// setting the command to the port
 44a:	88 bb       	out	0x18, r24	; 24
}

void soft_stop (void)       //soft stop(stops solowly)
{
  motion_set(0x0F);
}
 44c:	08 95       	ret

0000044e <init_devices>:


void init_devices (void)
{
 cli(); //Clears the global interrupts
 44e:	f8 94       	cli

//Motion Code

void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
 450:	87 b3       	in	r24, 0x17	; 23
 452:	8f 60       	ori	r24, 0x0F	; 15
 454:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
 456:	88 b3       	in	r24, 0x18	; 24
 458:	80 7f       	andi	r24, 0xF0	; 240
 45a:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
 45c:	81 b3       	in	r24, 0x11	; 17
 45e:	80 63       	ori	r24, 0x30	; 48
 460:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
 462:	82 b3       	in	r24, 0x12	; 18
 464:	80 63       	ori	r24, 0x30	; 48
 466:	82 bb       	out	0x12, r24	; 18

void init_devices (void)
{
 cli(); //Clears the global interrupts
 motion_port_init();
 sei(); //Enables the global interrupts
 468:	78 94       	sei
}
 46a:	08 95       	ret

0000046c <main>:



//Main Function
int main(void)
{
 46c:	ef 92       	push	r14
 46e:	ff 92       	push	r15
 470:	0f 93       	push	r16
 472:	1f 93       	push	r17
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 init_devices_usr();
 478:	0e 94 c3 01 	call	0x386	; 0x386 <init_devices_usr>
}


void init_devices (void)
{
 cli(); //Clears the global interrupts
 47c:	f8 94       	cli

//Motion Code

void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;   //set direction of the PORTB3 to PORTB0 pins as output
 47e:	87 b3       	in	r24, 0x17	; 23
 480:	8f 60       	ori	r24, 0x0F	; 15
 482:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0; // set initial value of the PORTB3 to PORTB0 pins to logic 0
 484:	88 b3       	in	r24, 0x18	; 24
 486:	80 7f       	andi	r24, 0xF0	; 240
 488:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;   //Setting PD4 and PD5 pins as output for PWM generation
 48a:	81 b3       	in	r24, 0x11	; 17
 48c:	80 63       	ori	r24, 0x30	; 48
 48e:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30; //PD4 and PD5 pins are for velocity control using PWM
 490:	82 b3       	in	r24, 0x12	; 18
 492:	80 63       	ori	r24, 0x30	; 48
 494:	82 bb       	out	0x12, r24	; 18

void init_devices (void)
{
 cli(); //Clears the global interrupts
 motion_port_init();
 sei(); //Enables the global interrupts
 496:	78 94       	sei
int main(void)
{
 init_devices_usr();
 init_devices();

 lcd_set_4bit();
 498:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_set_4bit>
 lcd_init();
 49c:	0e 94 91 00 	call	0x122	; 0x122 <lcd_init>
 4a0:	6a e7       	ldi	r22, 0x7A	; 122
 4a2:	e6 2e       	mov	r14, r22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4a4:	c8 eb       	ldi	r28, 0xB8	; 184
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
 4a8:	50 e2       	ldi	r21, 0x20	; 32
 4aa:	f5 2e       	mov	r15, r21

// Ultrasonic sensor are connected in chaining mode. This function rise a 
// trigger pulse of >20usec to command ringing.     
void ultrasonic_trigger(void)                 
{
 PORTD = PORTD | 0x40;  // make high the Trigger input for Ultrasonic sensor
 4ac:	01 e2       	ldi	r16, 0x21	; 33
 4ae:	12 e2       	ldi	r17, 0x22	; 34
 4b0:	96 9a       	sbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 4b2:	8e 2d       	mov	r24, r14
 4b4:	8a 95       	dec	r24
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <main+0x48>
 _delay_us(50);         // Wait for >20usec
 PORTD = PORTD & 0xBF;  // make low the Trigger input for Ultrasonic sensor
 4b8:	96 98       	cbi	0x12, 6	; 18
 4ba:	8c ed       	ldi	r24, 0xDC	; 220
 4bc:	95 e0       	ldi	r25, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4be:	fe 01       	movw	r30, r28
 4c0:	31 97       	sbiw	r30, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <main+0x54>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4c6:	d9 f7       	brne	.-10     	; 0x4be <main+0x52>
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
 4c8:	f7 b8       	out	0x07, r15	; 7
 ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 4ca:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
 4cc:	34 9b       	sbis	0x06, 4	; 6
 4ce:	fe cf       	rjmp	.-4      	; 0x4cc <main+0x60>
 a=ADCH;
 4d0:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 4d2:	34 9a       	sbi	0x06, 4	; 6
 while(1)
 {
	ultrasonic_trigger();      // call ultrasonic triggering after enery 150msec  
    _delay_ms(150);            
  
    Left_ultrasonic_Sensor = ADC_Conversion(0) * 2;         // In Inches
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	48 2f       	mov	r20, r24
 4dc:	80 93 6d 00 	sts	0x006D, r24
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
 4e0:	07 b9       	out	0x07, r16	; 7
 ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 4e2:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
 4e4:	34 9b       	sbis	0x06, 4	; 6
 4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <main+0x78>
 a=ADCH;
 4e8:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 4ea:	34 9a       	sbi	0x06, 4	; 6
 {
	ultrasonic_trigger();      // call ultrasonic triggering after enery 150msec  
    _delay_ms(150);            
  
    Left_ultrasonic_Sensor = ADC_Conversion(0) * 2;         // In Inches
    Center_ultrasonic_Sensor = ADC_Conversion(1) * 2;       // In Inches
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	80 93 65 00 	sts	0x0065, r24
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;  			
 ADMUX= 0x20| Ch;	   		
 4f6:	17 b9       	out	0x07, r17	; 7
 ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 4f8:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
 4fa:	34 9b       	sbis	0x06, 4	; 6
 4fc:	fe cf       	rjmp	.-4      	; 0x4fa <main+0x8e>
 a=ADCH;
 4fe:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 500:	34 9a       	sbi	0x06, 4	; 6
	ultrasonic_trigger();      // call ultrasonic triggering after enery 150msec  
    _delay_ms(150);            
  
    Left_ultrasonic_Sensor = ADC_Conversion(0) * 2;         // In Inches
    Center_ultrasonic_Sensor = ADC_Conversion(1) * 2;       // In Inches
    Right_ultrasonic_Sensor = ADC_Conversion(2) * 2;        // In Inches
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	80 93 68 00 	sts	0x0068, r24
    
	lcd_print(1,1,Left_ultrasonic_Sensor,3);
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	61 e0       	ldi	r22, 0x01	; 1
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	23 e0       	ldi	r18, 0x03	; 3
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_print>
	lcd_print(1,5,Center_ultrasonic_Sensor,3);
 51a:	40 91 65 00 	lds	r20, 0x0065
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	65 e0       	ldi	r22, 0x05	; 5
 522:	50 e0       	ldi	r21, 0x00	; 0
 524:	23 e0       	ldi	r18, 0x03	; 3
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_print>
	lcd_print(1,9,Right_ultrasonic_Sensor,3);
 52c:	40 91 68 00 	lds	r20, 0x0068
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	69 e0       	ldi	r22, 0x09	; 9
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	23 e0       	ldi	r18, 0x03	; 3
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_print>


	vl=Left_ultrasonic_Sensor;
 53e:	90 91 6d 00 	lds	r25, 0x006D
	vc=Center_ultrasonic_Sensor;
	vr=Right_ultrasonic_Sensor;
 542:	20 91 68 00 	lds	r18, 0x0068

		if(vc>0x10)
 546:	80 91 65 00 	lds	r24, 0x0065
 54a:	81 31       	cpi	r24, 0x11	; 17
 54c:	60 f0       	brcs	.+24     	; 0x566 <main+0xfa>
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 54e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 550:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 552:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore; 			// setting the command to the port
 554:	88 bb       	out	0x18, r24	; 24
 556:	88 eb       	ldi	r24, 0xB8	; 184
 558:	9b e0       	ldi	r25, 0x0B	; 11
 55a:	fe 01       	movw	r30, r28
 55c:	31 97       	sbiw	r30, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <main+0xf0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 560:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 562:	d9 f7       	brne	.-10     	; 0x55a <main+0xee>
 564:	26 c0       	rjmp	.+76     	; 0x5b2 <main+0x146>
			{
			  forward(); 
			  _delay_ms(300);
			}

			else if(vl>0x10)
 566:	91 31       	cpi	r25, 0x11	; 17
 568:	60 f0       	brcs	.+24     	; 0x582 <main+0x116>
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 56a:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 56c:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 56e:	81 60       	ori	r24, 0x01	; 1
 PORTB = PortBRestore; 			// setting the command to the port
 570:	88 bb       	out	0x18, r24	; 24
 572:	88 eb       	ldi	r24, 0xB8	; 184
 574:	9b e0       	ldi	r25, 0x0B	; 11
 576:	fe 01       	movw	r30, r28
 578:	31 97       	sbiw	r30, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <main+0x10c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 57c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 57e:	d9 f7       	brne	.-10     	; 0x576 <main+0x10a>
 580:	18 c0       	rjmp	.+48     	; 0x5b2 <main+0x146>
				soft_left_2(); 
				_delay_ms(300);

			}
				
				else if(vr>0x10)
 582:	21 31       	cpi	r18, 0x11	; 17
 584:	60 f0       	brcs	.+24     	; 0x59e <main+0x132>
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 586:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 588:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 58a:	88 60       	ori	r24, 0x08	; 8
 PORTB = PortBRestore; 			// setting the command to the port
 58c:	88 bb       	out	0x18, r24	; 24
 58e:	88 eb       	ldi	r24, 0xB8	; 184
 590:	9b e0       	ldi	r25, 0x0B	; 11
 592:	fe 01       	movw	r30, r28
 594:	31 97       	sbiw	r30, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <main+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 598:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 59a:	d9 f7       	brne	.-10     	; 0x592 <main+0x126>
 59c:	0a c0       	rjmp	.+20     	; 0x5b2 <main+0x146>
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortBRestore = PORTB; 			// reading the PORTB's original status
 59e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0; 			// setting lower direction nibbel to 0
 5a0:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore; 			// setting the command to the port
 5a2:	88 bb       	out	0x18, r24	; 24
 5a4:	88 e9       	ldi	r24, 0x98	; 152
 5a6:	9a e3       	ldi	r25, 0x3A	; 58
 5a8:	fe 01       	movw	r30, r28
 5aa:	31 97       	sbiw	r30, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <main+0x13e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5b0:	d9 f7       	brne	.-10     	; 0x5a8 <main+0x13c>



    //BATT_Voltage = (ADC_Conversion(6) * 0.03921) + 0.7;	//Prints Battery Voltage Status
    //lcd_print(2,13,BATT_Voltage,4);
    print_sensor(2,13,6);		//Prints Battery Voltage Status
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	6d e0       	ldi	r22, 0x0D	; 13
 5b6:	46 e0       	ldi	r20, 0x06	; 6
 5b8:	0e 94 ad 01 	call	0x35a	; 0x35a <print_sensor>
 5bc:	79 cf       	rjmp	.-270    	; 0x4b0 <main+0x44>

000005be <__udivmodhi4>:
 5be:	aa 1b       	sub	r26, r26
 5c0:	bb 1b       	sub	r27, r27
 5c2:	51 e1       	ldi	r21, 0x11	; 17
 5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <__udivmodhi4_ep>

000005c6 <__udivmodhi4_loop>:
 5c6:	aa 1f       	adc	r26, r26
 5c8:	bb 1f       	adc	r27, r27
 5ca:	a6 17       	cp	r26, r22
 5cc:	b7 07       	cpc	r27, r23
 5ce:	10 f0       	brcs	.+4      	; 0x5d4 <__udivmodhi4_ep>
 5d0:	a6 1b       	sub	r26, r22
 5d2:	b7 0b       	sbc	r27, r23

000005d4 <__udivmodhi4_ep>:
 5d4:	88 1f       	adc	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	5a 95       	dec	r21
 5da:	a9 f7       	brne	.-22     	; 0x5c6 <__udivmodhi4_loop>
 5dc:	80 95       	com	r24
 5de:	90 95       	com	r25
 5e0:	bc 01       	movw	r22, r24
 5e2:	cd 01       	movw	r24, r26
 5e4:	08 95       	ret

000005e6 <_exit>:
 5e6:	f8 94       	cli

000005e8 <__stop_program>:
 5e8:	ff cf       	rjmp	.-2      	; 0x5e8 <__stop_program>
